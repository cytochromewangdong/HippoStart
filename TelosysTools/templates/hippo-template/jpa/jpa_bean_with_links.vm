##----------------------------------------------------------------------------------------------------
## JPA beans suffix
#set ( $env.entityClassNameSuffix = "Entity" )
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
#set( $allMappedFields = $fn.concatLists($entity.keyAttributes, $dataFields) )
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
## IF COMPOSITE PRIMARY KEY : GENERATE A JAVA CLASS FOR THIS COMPOSITE KEY
#if ( $entity.hasCompositePrimaryKey() )
// This Bean has a composite Primary Key  
$generator.generate($target.entityName ,  "${entity.name}Key.java", $target.folder, "jpa/jpa_bean_pk.vm"  )
#else 
// This Bean has a basic Primary Key (not composite) 
#end
##--- @Transient usage count ( number of xxxToMany links ) 
#set ( $TRANSIENT_COUNT = 0 )
#foreach( $link in $entity.selectedLinks )
#if ( $link.isCardinalityManyToMany() || $link.isCardinalityOneToMany() )
#set ( $TRANSIENT_COUNT = $TRANSIENT_COUNT + 1 )
#end
#end

package ${target.javaPackageFromFolder($SRC)};

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

#foreach( $import in $java.imports($entity) )
import $import;
#end

#foreach( $import in $jpa.imports($entity) )
import $import;
#end

//import ${ENTITY_PKG}.jpa.base.${entity.name};
/**
 * Persistent class for entity stored in table "${entity.databaseTable}"
 *
 * @author Telosys Tools Generator
 *
 */

$jpa.entityAnnotations(0, $entity)
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="${entity.name}.countAll", query="SELECT COUNT(x) FROM ${entity.name} x" )
} )
@AttributeOverrides({
#set( $count = 0 )
#foreach( $f in $linkFields )
#if( $count > 0 ) , #end @AttributeOverride(name = "${f.name}", column = @Column(name = "${f.databaseName}", insertable = false, updatable = false))
#set( $count = $count + 1 )
#end

})
public class ${entity.name} extends ${ENTITY_PKG}.jpa.base.${entity.name} implements Serializable {

   protected static final long serialVersionUID = 8L;

     //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
## #foreach( $link in $entity.links )
#foreach( $link in $entity.selectedLinks )
$jpa.linkAnnotations(4, $link, $allMappedFields)
    protected ${link.formattedFieldType(0)} $link.formattedFieldName(12);
#end


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
## #foreach( $link in $entity.links )
#foreach( $link in $entity.selectedLinks )
#if ( $link.setter )    public void ${link.setter}( ${link.formattedFieldType(0)} ${link.formattedFieldName(0)} ) {
        this.${link.formattedFieldName(0)} = ${link.formattedFieldName(0)};
    }
#end
#if ( $link.getter )    public ${link.formattedFieldType(0)} ${link.getter}() {
        return this.${link.formattedFieldName(0)};
    }
#end

#end  

###$java.toStringMethod($entity, $dataFields, "compositePrimaryKey", 4)
}
