/*
 * Created on 27 五月 2015 ( Time 17:36:23 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.dt.hippo.auto.model.jpa.base;

import java.io.Serializable;


//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "administrator"
 *
 * @author Telosys Tools Generator
 *
 */
@MappedSuperclass
//@Entity
@Table(name="administrator", catalog="hippo" )
// Define named queries here
//@NamedQueries ( {
//  @NamedQuery ( name="AdministratorEntity.countAll", query="SELECT COUNT(x) FROM AdministratorEntity x" )
//} )
public class AdministratorEntity extends com.dt.hippo.core.base.BaseBeanCommon implements Serializable {

    protected static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    protected Long       uid          ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    protected String     username     ;

    protected String     upperusername ;

    protected Long       usernamehashcode ;

    protected String     email        ;

    protected String     upperemail   ;

    protected Long       emailhashcode ;

    protected String     md5email     ;

    protected String     password     ;

    protected String     random       ;

    protected String     imageurl     ;

    protected Date       createdate   ;

    protected Date       modifydate   ;

    protected String     createuser   ;

    protected String     modifyuser   ;

    protected Byte       delflg       ;

    protected String     platform     ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public AdministratorEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setUid( Long uid ) {
        this.uid = uid ;
    }
       @Id
    @Column(name="uid", nullable=false)
  public Long getUid() {
        return this.uid;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : userName ( VARCHAR ) 
    public void setUsername( String username ) {
        this.username = username;
    }
       @Column(name="userName", length=50)
 public String getUsername() {
        return this.username;
    }

    //--- DATABASE MAPPING : upperUserName ( VARCHAR ) 
    public void setUpperusername( String upperusername ) {
        this.upperusername = upperusername;
    }
       @Column(name="upperUserName", length=50)
 public String getUpperusername() {
        return this.upperusername;
    }

    //--- DATABASE MAPPING : usernameHashcode ( BIGINT ) 
    public void setUsernamehashcode( Long usernamehashcode ) {
        this.usernamehashcode = usernamehashcode;
    }
       @Column(name="usernameHashcode")
 public Long getUsernamehashcode() {
        return this.usernamehashcode;
    }

    //--- DATABASE MAPPING : email ( VARCHAR ) 
    public void setEmail( String email ) {
        this.email = email;
    }
       @Column(name="email", length=100)
 public String getEmail() {
        return this.email;
    }

    //--- DATABASE MAPPING : upperEmail ( VARCHAR ) 
    public void setUpperemail( String upperemail ) {
        this.upperemail = upperemail;
    }
       @Column(name="upperEmail", length=100)
 public String getUpperemail() {
        return this.upperemail;
    }

    //--- DATABASE MAPPING : emailHashcode ( BIGINT ) 
    public void setEmailhashcode( Long emailhashcode ) {
        this.emailhashcode = emailhashcode;
    }
       @Column(name="emailHashcode")
 public Long getEmailhashcode() {
        return this.emailhashcode;
    }

    //--- DATABASE MAPPING : md5email ( VARCHAR ) 
    public void setMd5email( String md5email ) {
        this.md5email = md5email;
    }
       @Column(name="md5email", length=32)
 public String getMd5email() {
        return this.md5email;
    }

    //--- DATABASE MAPPING : password ( VARCHAR ) 
    public void setPassword( String password ) {
        this.password = password;
    }
       @Column(name="password", length=32)
 public String getPassword() {
        return this.password;
    }

    //--- DATABASE MAPPING : random ( VARCHAR ) 
    public void setRandom( String random ) {
        this.random = random;
    }
       @Column(name="random", length=6)
 public String getRandom() {
        return this.random;
    }

    //--- DATABASE MAPPING : imageUrl ( VARCHAR ) 
    public void setImageurl( String imageurl ) {
        this.imageurl = imageurl;
    }
       @Column(name="imageUrl", length=150)
 public String getImageurl() {
        return this.imageurl;
    }

    //--- DATABASE MAPPING : createDate ( DATETIME ) 
    public void setCreatedate( Date createdate ) {
        this.createdate = createdate;
    }
       @Temporal(TemporalType.TIMESTAMP)
    @Column(name="createDate")
 public Date getCreatedate() {
        return this.createdate;
    }

    //--- DATABASE MAPPING : modifyDate ( DATETIME ) 
    public void setModifydate( Date modifydate ) {
        this.modifydate = modifydate;
    }
       @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modifyDate")
 public Date getModifydate() {
        return this.modifydate;
    }

    //--- DATABASE MAPPING : createUser ( VARCHAR ) 
    public void setCreateuser( String createuser ) {
        this.createuser = createuser;
    }
       @Column(name="createUser", length=50)
 public String getCreateuser() {
        return this.createuser;
    }

    //--- DATABASE MAPPING : modifyUser ( VARCHAR ) 
    public void setModifyuser( String modifyuser ) {
        this.modifyuser = modifyuser;
    }
       @Column(name="modifyUser", length=50)
 public String getModifyuser() {
        return this.modifyuser;
    }

    //--- DATABASE MAPPING : delFlg ( TINYINT ) 
    public void setDelflg( Byte delflg ) {
        this.delflg = delflg;
    }
       @Column(name="delFlg")
 public Byte getDelflg() {
        return this.delflg;
    }

    //--- DATABASE MAPPING : platform ( VARCHAR ) 
    public void setPlatform( String platform ) {
        this.platform = platform;
    }
       @Column(name="platform", length=50)
 public String getPlatform() {
        return this.platform;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(uid);
        sb.append("]:"); 
        sb.append(username);
        sb.append("|");
        sb.append(upperusername);
        sb.append("|");
        sb.append(usernamehashcode);
        sb.append("|");
        sb.append(email);
        sb.append("|");
        sb.append(upperemail);
        sb.append("|");
        sb.append(emailhashcode);
        sb.append("|");
        sb.append(md5email);
        sb.append("|");
        sb.append(password);
        sb.append("|");
        sb.append(random);
        sb.append("|");
        sb.append(imageurl);
        sb.append("|");
        sb.append(createdate);
        sb.append("|");
        sb.append(modifydate);
        sb.append("|");
        sb.append(createuser);
        sb.append("|");
        sb.append(modifyuser);
        sb.append("|");
        sb.append(delflg);
        sb.append("|");
        sb.append(platform);
        return sb.toString(); 
    } 

}
