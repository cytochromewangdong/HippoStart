/*
 * Created on 27 五月 2015 ( Time 17:36:23 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.dt.hippo.auto.model.jpa.base;

import java.io.Serializable;


//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "account"
 *
 * @author Telosys Tools Generator
 *
 */
@MappedSuperclass
//@Entity
@Table(name="account", catalog="hippo" )
// Define named queries here
//@NamedQueries ( {
//  @NamedQuery ( name="AccountEntity.countAll", query="SELECT COUNT(x) FROM AccountEntity x" )
//} )
public class AccountEntity extends com.dt.hippo.core.base.BaseBeanCommon implements Serializable {

    protected static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    protected Long       uid          ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    protected String     username     ;

    protected Integer    usernamehashcode ;

    protected String     email        ;

    protected Integer    emailhashcode ;

    protected String     md5email     ;

    protected String     password     ;

    protected String     imageurl     ;

    protected String     nickname     ;

    protected String     address      ;

    protected String     location     ;

    protected Byte       usersource   ;

    protected String     usersourcename ;

    protected String     externaluid  ;

    protected String     externalusername ;

    protected Byte       emailverified ;

    protected String     mobiletoken  ;

    protected String     language     ;

    protected Date       createdate   ;

    protected Date       modifydate   ;

    protected String     createuser   ;

    protected String     modifyuser   ;

    protected Byte       delflg       ;

    protected String     platform     ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public AccountEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setUid( Long uid ) {
        this.uid = uid ;
    }
       @Id
    @Column(name="uid", nullable=false)
  public Long getUid() {
        return this.uid;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : userName ( VARCHAR ) 
    public void setUsername( String username ) {
        this.username = username;
    }
       @Column(name="userName", length=50)
 public String getUsername() {
        return this.username;
    }

    //--- DATABASE MAPPING : usernameHashcode ( INT ) 
    public void setUsernamehashcode( Integer usernamehashcode ) {
        this.usernamehashcode = usernamehashcode;
    }
       @Column(name="usernameHashcode")
 public Integer getUsernamehashcode() {
        return this.usernamehashcode;
    }

    //--- DATABASE MAPPING : email ( VARCHAR ) 
    public void setEmail( String email ) {
        this.email = email;
    }
       @Column(name="email", length=100)
 public String getEmail() {
        return this.email;
    }

    //--- DATABASE MAPPING : emailHashcode ( INT ) 
    public void setEmailhashcode( Integer emailhashcode ) {
        this.emailhashcode = emailhashcode;
    }
       @Column(name="emailHashcode")
 public Integer getEmailhashcode() {
        return this.emailhashcode;
    }

    //--- DATABASE MAPPING : md5email ( VARCHAR ) 
    public void setMd5email( String md5email ) {
        this.md5email = md5email;
    }
       @Column(name="md5email", length=32)
 public String getMd5email() {
        return this.md5email;
    }

    //--- DATABASE MAPPING : password ( VARCHAR ) 
    public void setPassword( String password ) {
        this.password = password;
    }
       @Column(name="password", length=32)
 public String getPassword() {
        return this.password;
    }

    //--- DATABASE MAPPING : imageUrl ( VARCHAR ) 
    public void setImageurl( String imageurl ) {
        this.imageurl = imageurl;
    }
       @Column(name="imageUrl", length=300)
 public String getImageurl() {
        return this.imageurl;
    }

    //--- DATABASE MAPPING : nickname ( VARCHAR ) 
    public void setNickname( String nickname ) {
        this.nickname = nickname;
    }
       @Column(name="nickname", length=30)
 public String getNickname() {
        return this.nickname;
    }

    //--- DATABASE MAPPING : address ( VARCHAR ) 
    public void setAddress( String address ) {
        this.address = address;
    }
       @Column(name="address", length=250)
 public String getAddress() {
        return this.address;
    }

    //--- DATABASE MAPPING : location ( VARCHAR ) 
    public void setLocation( String location ) {
        this.location = location;
    }
       @Column(name="location", length=80)
 public String getLocation() {
        return this.location;
    }

    //--- DATABASE MAPPING : usersource ( TINYINT ) 
    public void setUsersource( Byte usersource ) {
        this.usersource = usersource;
    }
       @Column(name="usersource")
 public Byte getUsersource() {
        return this.usersource;
    }

    //--- DATABASE MAPPING : usersourceName ( VARCHAR ) 
    public void setUsersourcename( String usersourcename ) {
        this.usersourcename = usersourcename;
    }
       @Column(name="usersourceName", length=32)
 public String getUsersourcename() {
        return this.usersourcename;
    }

    //--- DATABASE MAPPING : externalUID ( VARCHAR ) 
    public void setExternaluid( String externaluid ) {
        this.externaluid = externaluid;
    }
       @Column(name="externalUID", length=32)
 public String getExternaluid() {
        return this.externaluid;
    }

    //--- DATABASE MAPPING : externalUserName ( VARCHAR ) 
    public void setExternalusername( String externalusername ) {
        this.externalusername = externalusername;
    }
       @Column(name="externalUserName", length=50)
 public String getExternalusername() {
        return this.externalusername;
    }

    //--- DATABASE MAPPING : emailVerified ( TINYINT ) 
    public void setEmailverified( Byte emailverified ) {
        this.emailverified = emailverified;
    }
       @Column(name="emailVerified")
 public Byte getEmailverified() {
        return this.emailverified;
    }

    //--- DATABASE MAPPING : mobileToken ( VARCHAR ) 
    public void setMobiletoken( String mobiletoken ) {
        this.mobiletoken = mobiletoken;
    }
       @Column(name="mobileToken", length=64)
 public String getMobiletoken() {
        return this.mobiletoken;
    }

    //--- DATABASE MAPPING : language ( VARCHAR ) 
    public void setLanguage( String language ) {
        this.language = language;
    }
       @Column(name="language", length=20)
 public String getLanguage() {
        return this.language;
    }

    //--- DATABASE MAPPING : createDate ( DATETIME ) 
    public void setCreatedate( Date createdate ) {
        this.createdate = createdate;
    }
       @Temporal(TemporalType.TIMESTAMP)
    @Column(name="createDate")
 public Date getCreatedate() {
        return this.createdate;
    }

    //--- DATABASE MAPPING : modifyDate ( DATETIME ) 
    public void setModifydate( Date modifydate ) {
        this.modifydate = modifydate;
    }
       @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modifyDate")
 public Date getModifydate() {
        return this.modifydate;
    }

    //--- DATABASE MAPPING : createUser ( VARCHAR ) 
    public void setCreateuser( String createuser ) {
        this.createuser = createuser;
    }
       @Column(name="createUser", length=50)
 public String getCreateuser() {
        return this.createuser;
    }

    //--- DATABASE MAPPING : modifyUser ( VARCHAR ) 
    public void setModifyuser( String modifyuser ) {
        this.modifyuser = modifyuser;
    }
       @Column(name="modifyUser", length=50)
 public String getModifyuser() {
        return this.modifyuser;
    }

    //--- DATABASE MAPPING : delFlg ( TINYINT ) 
    public void setDelflg( Byte delflg ) {
        this.delflg = delflg;
    }
       @Column(name="delFlg")
 public Byte getDelflg() {
        return this.delflg;
    }

    //--- DATABASE MAPPING : platform ( VARCHAR ) 
    public void setPlatform( String platform ) {
        this.platform = platform;
    }
       @Column(name="platform", length=50)
 public String getPlatform() {
        return this.platform;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(uid);
        sb.append("]:"); 
        sb.append(username);
        sb.append("|");
        sb.append(usernamehashcode);
        sb.append("|");
        sb.append(email);
        sb.append("|");
        sb.append(emailhashcode);
        sb.append("|");
        sb.append(md5email);
        sb.append("|");
        sb.append(password);
        sb.append("|");
        sb.append(imageurl);
        sb.append("|");
        sb.append(nickname);
        sb.append("|");
        sb.append(address);
        sb.append("|");
        sb.append(location);
        sb.append("|");
        sb.append(usersource);
        sb.append("|");
        sb.append(usersourcename);
        sb.append("|");
        sb.append(externaluid);
        sb.append("|");
        sb.append(externalusername);
        sb.append("|");
        sb.append(emailverified);
        sb.append("|");
        sb.append(mobiletoken);
        sb.append("|");
        sb.append(language);
        sb.append("|");
        sb.append(createdate);
        sb.append("|");
        sb.append(modifydate);
        sb.append("|");
        sb.append(createuser);
        sb.append("|");
        sb.append(modifyuser);
        sb.append("|");
        sb.append(delflg);
        sb.append("|");
        sb.append(platform);
        return sb.toString(); 
    } 

}
