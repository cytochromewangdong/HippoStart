/*
 * Created on 18 五月 2015 ( Time 11:07:08 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.dt.hippo.auto.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.dt.hippo.auto.model.Administrator;
import com.dt.hippo.auto.model.jpa.AdministratorEntity;
import java.util.Date;
import com.dt.hippo.auto.business.service.AdministratorService;
import com.dt.hippo.auto.business.service.mapping.AdministratorServiceMapper;
import com.dt.hippo.auto.data.repository.jpa.AdministratorJpaRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of AdministratorService
 */
@Service("administratorService")
@Transactional
public class AdministratorServiceImpl implements AdministratorService {

	@Resource
	protected AdministratorJpaRepository administratorJpaRepository;

	@Resource
	protected AdministratorServiceMapper administratorServiceMapper;
	
	@Override
	public Administrator findById(Long uid) {
		AdministratorEntity administratorEntity = administratorJpaRepository.findOne(uid);
		return administratorServiceMapper.mapAdministratorEntityToAdministrator(administratorEntity);
	}

	@Override
	public List<Administrator> findAll() {
		Iterable<AdministratorEntity> entities = administratorJpaRepository.findAll();
		List<Administrator> beans = new ArrayList<Administrator>();
		for(AdministratorEntity administratorEntity : entities) {
			beans.add(administratorServiceMapper.mapAdministratorEntityToAdministrator(administratorEntity));
		}
		return beans;
	}

	@Override
	public Administrator save(Administrator administrator) {
		return update(administrator) ;
	}

	@Override
	public Administrator create(Administrator administrator) {
//		AdministratorEntity administratorEntity = administratorJpaRepository.findOne(administrator.getUid());
//		if( administratorEntity != null ) {
//			throw new IllegalStateException("already.exists");
//		}
		AdministratorEntity administratorEntity = new AdministratorEntity();
		administratorServiceMapper.mapAdministratorToAdministratorEntity(administrator, administratorEntity);
		AdministratorEntity administratorEntitySaved = administratorJpaRepository.save(administratorEntity);
		return administratorServiceMapper.mapAdministratorEntityToAdministrator(administratorEntitySaved);
	}

	@Override
	public Administrator update(Administrator administrator) {
		AdministratorEntity administratorEntity = administratorJpaRepository.findOne(administrator.getUid());
		administratorServiceMapper.mapAdministratorToAdministratorEntity(administrator, administratorEntity);
		AdministratorEntity administratorEntitySaved = administratorJpaRepository.save(administratorEntity);
		return administratorServiceMapper.mapAdministratorEntityToAdministrator(administratorEntitySaved);
	}

	@Override
	public void delete(Long uid) {
		administratorJpaRepository.delete(uid);
	}

	public AdministratorJpaRepository getAdministratorJpaRepository() {
		return administratorJpaRepository;
	}

	public void setAdministratorJpaRepository(AdministratorJpaRepository administratorJpaRepository) {
		this.administratorJpaRepository = administratorJpaRepository;
	}

	public AdministratorServiceMapper getAdministratorServiceMapper() {
		return administratorServiceMapper;
	}

	public void setAdministratorServiceMapper(AdministratorServiceMapper administratorServiceMapper) {
		this.administratorServiceMapper = administratorServiceMapper;
	}

}
