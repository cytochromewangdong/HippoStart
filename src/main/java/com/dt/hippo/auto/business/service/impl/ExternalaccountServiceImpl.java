/*
 * Created on 13 五月 2015 ( Time 21:15:26 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.dt.hippo.auto.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.dt.hippo.auto.model.Externalaccount;
import com.dt.hippo.auto.model.jpa.ExternalaccountEntity;
import com.dt.hippo.auto.model.jpa.ExternalaccountEntityKey;
import java.util.Date;
import com.dt.hippo.auto.business.service.ExternalaccountService;
import com.dt.hippo.auto.business.service.mapping.ExternalaccountServiceMapper;
import com.dt.hippo.auto.data.repository.jpa.ExternalaccountJpaRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ExternalaccountService
 */
@Service("externalaccountService")
@Transactional
public class ExternalaccountServiceImpl implements ExternalaccountService {

	@Resource
	protected ExternalaccountJpaRepository externalaccountJpaRepository;

	@Resource
	protected ExternalaccountServiceMapper externalaccountServiceMapper;
	
	@Override
	public Externalaccount findById(Long userid, Byte usersource) {
		ExternalaccountEntityKey id = new ExternalaccountEntityKey(userid, usersource);
		ExternalaccountEntity externalaccountEntity = externalaccountJpaRepository.findOne(id);
		return externalaccountServiceMapper.mapExternalaccountEntityToExternalaccount(externalaccountEntity);
	}

	@Override
	public List<Externalaccount> findAll() {
		Iterable<ExternalaccountEntity> entities = externalaccountJpaRepository.findAll();
		List<Externalaccount> beans = new ArrayList<Externalaccount>();
		for(ExternalaccountEntity externalaccountEntity : entities) {
			beans.add(externalaccountServiceMapper.mapExternalaccountEntityToExternalaccount(externalaccountEntity));
		}
		return beans;
	}

	@Override
	public Externalaccount save(Externalaccount externalaccount) {
		return update(externalaccount) ;
	}

	@Override
	public Externalaccount create(Externalaccount externalaccount) {
		ExternalaccountEntityKey id = new ExternalaccountEntityKey(externalaccount.getUserid(), externalaccount.getUsersource());
		ExternalaccountEntity externalaccountEntity = externalaccountJpaRepository.findOne(id);
		if( externalaccountEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		externalaccountEntity = new ExternalaccountEntity();
		externalaccountServiceMapper.mapExternalaccountToExternalaccountEntity(externalaccount, externalaccountEntity);
		ExternalaccountEntity externalaccountEntitySaved = externalaccountJpaRepository.save(externalaccountEntity);
		return externalaccountServiceMapper.mapExternalaccountEntityToExternalaccount(externalaccountEntitySaved);
	}

	@Override
	public Externalaccount update(Externalaccount externalaccount) {
		ExternalaccountEntityKey id = new ExternalaccountEntityKey(externalaccount.getUserid(), externalaccount.getUsersource());
		ExternalaccountEntity externalaccountEntity = externalaccountJpaRepository.findOne(id);
		externalaccountServiceMapper.mapExternalaccountToExternalaccountEntity(externalaccount, externalaccountEntity);
		ExternalaccountEntity externalaccountEntitySaved = externalaccountJpaRepository.save(externalaccountEntity);
		return externalaccountServiceMapper.mapExternalaccountEntityToExternalaccount(externalaccountEntitySaved);
	}

	@Override
	public void delete(Long userid, Byte usersource) {
		ExternalaccountEntityKey id = new ExternalaccountEntityKey(userid, usersource);
		externalaccountJpaRepository.delete(id);
	}

	public ExternalaccountJpaRepository getExternalaccountJpaRepository() {
		return externalaccountJpaRepository;
	}

	public void setExternalaccountJpaRepository(ExternalaccountJpaRepository externalaccountJpaRepository) {
		this.externalaccountJpaRepository = externalaccountJpaRepository;
	}

	public ExternalaccountServiceMapper getExternalaccountServiceMapper() {
		return externalaccountServiceMapper;
	}

	public void setExternalaccountServiceMapper(ExternalaccountServiceMapper externalaccountServiceMapper) {
		this.externalaccountServiceMapper = externalaccountServiceMapper;
	}

}
