/*
 * Created on 18 五月 2015 ( Time 11:07:08 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.dt.hippo.auto.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.dt.hippo.auto.model.Account;
import com.dt.hippo.auto.model.jpa.AccountEntity;
import java.util.Date;
import com.dt.hippo.auto.business.service.AccountService;
import com.dt.hippo.auto.business.service.mapping.AccountServiceMapper;
import com.dt.hippo.auto.data.repository.jpa.AccountJpaRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of AccountService
 */
@Service("accountService")
@Transactional
public class AccountServiceImpl implements AccountService {

	@Resource
	protected AccountJpaRepository accountJpaRepository;

	@Resource
	protected AccountServiceMapper accountServiceMapper;
	
	@Override
	public Account findById(Long uid) {
		AccountEntity accountEntity = accountJpaRepository.findOne(uid);
		return accountServiceMapper.mapAccountEntityToAccount(accountEntity);
	}

	@Override
	public List<Account> findAll() {
		Iterable<AccountEntity> entities = accountJpaRepository.findAll();
		List<Account> beans = new ArrayList<Account>();
		for(AccountEntity accountEntity : entities) {
			beans.add(accountServiceMapper.mapAccountEntityToAccount(accountEntity));
		}
		return beans;
	}

	@Override
	public Account save(Account account) {
		return update(account) ;
	}

	@Override
	public Account create(Account account) {
//		AccountEntity accountEntity = accountJpaRepository.findOne(account.getUid());
//		if( accountEntity != null ) {
//			throw new IllegalStateException("already.exists");
//		}
		AccountEntity accountEntity = new AccountEntity();
		accountServiceMapper.mapAccountToAccountEntity(account, accountEntity);
		AccountEntity accountEntitySaved = accountJpaRepository.save(accountEntity);
		return accountServiceMapper.mapAccountEntityToAccount(accountEntitySaved);
	}

	@Override
	public Account update(Account account) {
		AccountEntity accountEntity = accountJpaRepository.findOne(account.getUid());
		accountServiceMapper.mapAccountToAccountEntity(account, accountEntity);
		AccountEntity accountEntitySaved = accountJpaRepository.save(accountEntity);
		return accountServiceMapper.mapAccountEntityToAccount(accountEntitySaved);
	}

	@Override
	public void delete(Long uid) {
		accountJpaRepository.delete(uid);
	}

	public AccountJpaRepository getAccountJpaRepository() {
		return accountJpaRepository;
	}

	public void setAccountJpaRepository(AccountJpaRepository accountJpaRepository) {
		this.accountJpaRepository = accountJpaRepository;
	}

	public AccountServiceMapper getAccountServiceMapper() {
		return accountServiceMapper;
	}

	public void setAccountServiceMapper(AccountServiceMapper accountServiceMapper) {
		this.accountServiceMapper = accountServiceMapper;
	}

}
