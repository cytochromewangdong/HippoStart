/*
 * Created on 13 五月 2015 ( Time 21:15:31 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.dt.hippo.auto.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.dt.hippo.auto.model.Sequence;
import com.dt.hippo.auto.model.jpa.SequenceEntity;
import com.dt.hippo.auto.model.jpa.SequenceEntityKey;
import com.dt.hippo.auto.business.service.SequenceService;
import com.dt.hippo.auto.business.service.mapping.SequenceServiceMapper;
import com.dt.hippo.auto.data.repository.jpa.SequenceJpaRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of SequenceService
 */
@Service("sequenceService")
@Transactional
public class SequenceServiceImpl implements SequenceService {

	@Resource
	protected SequenceJpaRepository sequenceJpaRepository;

	@Resource
	protected SequenceServiceMapper sequenceServiceMapper;
	
	@Override
	public Sequence findById(Long uid, String keyword) {
		SequenceEntityKey id = new SequenceEntityKey(uid, keyword);
		SequenceEntity sequenceEntity = sequenceJpaRepository.findOne(id);
		return sequenceServiceMapper.mapSequenceEntityToSequence(sequenceEntity);
	}

	@Override
	public List<Sequence> findAll() {
		Iterable<SequenceEntity> entities = sequenceJpaRepository.findAll();
		List<Sequence> beans = new ArrayList<Sequence>();
		for(SequenceEntity sequenceEntity : entities) {
			beans.add(sequenceServiceMapper.mapSequenceEntityToSequence(sequenceEntity));
		}
		return beans;
	}

	@Override
	public Sequence save(Sequence sequence) {
		return update(sequence) ;
	}

	@Override
	public Sequence create(Sequence sequence) {
		SequenceEntityKey id = new SequenceEntityKey(sequence.getUid(), sequence.getKeyword());
		SequenceEntity sequenceEntity = sequenceJpaRepository.findOne(id);
		if( sequenceEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		sequenceEntity = new SequenceEntity();
		sequenceServiceMapper.mapSequenceToSequenceEntity(sequence, sequenceEntity);
		SequenceEntity sequenceEntitySaved = sequenceJpaRepository.save(sequenceEntity);
		return sequenceServiceMapper.mapSequenceEntityToSequence(sequenceEntitySaved);
	}

	@Override
	public Sequence update(Sequence sequence) {
		SequenceEntityKey id = new SequenceEntityKey(sequence.getUid(), sequence.getKeyword());
		SequenceEntity sequenceEntity = sequenceJpaRepository.findOne(id);
		sequenceServiceMapper.mapSequenceToSequenceEntity(sequence, sequenceEntity);
		SequenceEntity sequenceEntitySaved = sequenceJpaRepository.save(sequenceEntity);
		return sequenceServiceMapper.mapSequenceEntityToSequence(sequenceEntitySaved);
	}

	@Override
	public void delete(Long uid, String keyword) {
		SequenceEntityKey id = new SequenceEntityKey(uid, keyword);
		sequenceJpaRepository.delete(id);
	}

	public SequenceJpaRepository getSequenceJpaRepository() {
		return sequenceJpaRepository;
	}

	public void setSequenceJpaRepository(SequenceJpaRepository sequenceJpaRepository) {
		this.sequenceJpaRepository = sequenceJpaRepository;
	}

	public SequenceServiceMapper getSequenceServiceMapper() {
		return sequenceServiceMapper;
	}

	public void setSequenceServiceMapper(SequenceServiceMapper sequenceServiceMapper) {
		this.sequenceServiceMapper = sequenceServiceMapper;
	}

}
