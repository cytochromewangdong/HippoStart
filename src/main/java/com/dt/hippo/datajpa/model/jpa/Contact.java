/*
 * Created on 21 ���� 2014 ( Time 16:05:25 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.dt.hippo.datajpa.model.jpa;

import java.io.Serializable;
//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

/**
 * Persistent class for entity stored in table "CONTACT"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="CONTACT", catalog="hippo" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="Contact.countAll", query="SELECT COUNT(x) FROM Contact x" )
} )
public class Contact implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="ID", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="FIRST_NAME", nullable=false, length=60)
    private String     firstName    ;

    @Column(name="LAST_NAME", nullable=false, length=40)
    private String     lastName     ;

    @Temporal(TemporalType.DATE)
    @Column(name="BIRTH_DATE")
    private Date       birthDate    ;

    @Version
    @Column(name="VERSION", nullable=false)
    private Integer    version      ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany( mappedBy="contact", targetEntity=ContactTelDetail.class)//fetch = FetchType.EAGER,
    private List<ContactTelDetail> listOfContactTelDetail;

    @ManyToMany(targetEntity=Hobby.class)//fetch = FetchType.EAGER,
    @JoinTable(name="CONTACT_HOBBY_DETAIL", 
      joinColumns=@JoinColumn(name="CONTACT_ID", referencedColumnName="ID"),
      inverseJoinColumns=@JoinColumn(name="HOBBY_ID", referencedColumnName="HOBBY_ID")
     ) 

    private List<Hobby> listOfHobby ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public Contact() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : FIRST_NAME ( VARCHAR ) 
    public void setFirstName( String firstName ) {
        this.firstName = firstName;
    }
    public String getFirstName() {
        return this.firstName;
    }

    //--- DATABASE MAPPING : LAST_NAME ( VARCHAR ) 
    public void setLastName( String lastName ) {
        this.lastName = lastName;
    }
    public String getLastName() {
        return this.lastName;
    }

    //--- DATABASE MAPPING : BIRTH_DATE ( DATE ) 
    public void setBirthDate( Date birthDate ) {
        this.birthDate = birthDate;
    }
    public Date getBirthDate() {
        return this.birthDate;
    }

    //--- DATABASE MAPPING : VERSION ( INT ) 
    public void setVersion( Integer version ) {
        this.version = version;
    }
    public Integer getVersion() {
        return this.version;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfContactTelDetail( List<ContactTelDetail> listOfContactTelDetail ) {
        this.listOfContactTelDetail = listOfContactTelDetail;
    }
    public List<ContactTelDetail> getListOfContactTelDetail() {
        return this.listOfContactTelDetail;
    }

    public void setListOfHobby( List<Hobby> listOfHobby ) {
        this.listOfHobby = listOfHobby;
    }
    public List<Hobby> getListOfHobby() {
        return this.listOfHobby;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(firstName);
        sb.append("|");
        sb.append(lastName);
        sb.append("|");
        sb.append(birthDate);
        sb.append("|");
        sb.append(version);
        return sb.toString(); 
    } 

}
